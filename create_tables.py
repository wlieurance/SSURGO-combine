table_statements = [

####### LEVEL 1 #######
"""CREATE TABLE {notexists} {schema}.imports (
    ssa {limit_text} (10) PRIMARY KEY, 
    version {short_int} NOT NULL, 
    est_date {date} NOT NULL);""",
    
"""CREATE TABLE {notexists} {schema}.distmd (
    distgendate {date},
    diststatus {limit_text} (254) NOT NULL,
    interpmaxreasons {short_int},
    distmdkey {limit_text} (30) PRIMARY KEY);""",

"""CREATE TABLE {notexists} {schema}.featdesc (
    areasymbol {limit_text} (20) NOT NULL,
    spatialversion {int} NOT NULL,
    featsym {limit_text} (3) NOT NULL,
    featname {limit_text} (80) NOT NULL,
    featdesc {text} NOT NULL,
    featkey {limit_text} (30) PRIMARY KEY);""",

"""CREATE TABLE {notexists} {schema}.featline (
    OBJECTID {oid},
    areasymbol {limit_text} (20),
    spatialver {double},
    featsym {limit_text} (3),
    featkey {limit_text} (30),
    length_m {double});""",

"""CREATE TABLE {notexists} {schema}.featpoint (
    OBJECTID {oid},
    areasymbol {limit_text} (20),
    spatialver {double},
    featsym {limit_text} (3),
    featkey {limit_text} (30),
    x {double},
    y {double});""",

"""CREATE TABLE {notexists} {schema}.legend (
    areatypename {limit_text} (45) NOT NULL,
    areasymbol {limit_text} (20) NOT NULL,
    areaname {limit_text} (135),
    areaacres {int},
    mlraoffice {limit_text} (254),
    legenddesc {limit_text} (60),
    ssastatus {limit_text} (254),
    mouagncyresp {limit_text} (254),
    projectscale {int},
    cordate {date},
    ssurgoarchived {date},
    legendsuituse {limit_text} (254),
    legendcertstat {limit_text} (254),
    lkey {limit_text} (30) PRIMARY KEY);""",

"""CREATE TABLE {notexists} {schema}.mdstatdomdet (
    domainname {limit_text} (40) NOT NULL,
    choicesequence {short_int} NOT NULL,
    choice {limit_text} (254) NOT NULL,
    choicedesc {text},
    choiceobsolete {limit_text} (3) NOT NULL,
    PRIMARY KEY (domainname, choicesequence));""",

"""CREATE TABLE {notexists} {schema}.mdstatdommas (
    domainname {limit_text} (40) PRIMARY KEY,
    domainmaxlen {short_int} NOT NULL);""",

"""CREATE TABLE {notexists} {schema}.mdstatidxdet (
    tabphyname {limit_text} (30) NOT NULL,
    idxphyname {limit_text} (30) NOT NULL,
    idxcolsequence {short_int} NOT NULL,
    colphyname {limit_text} (30) NOT NULL,
    PRIMARY KEY (tabphyname, idxphyname, idxcolsequence));""",

"""CREATE TABLE {notexists} {schema}.mdstatidxmas (
    tabphyname {limit_text} (30) NOT NULL,
    idxphyname {limit_text} (30) NOT NULL,
    uniqueindex {limit_text} (3) NOT NULL,
    PRIMARY KEY (tabphyname, idxphyname));""",

"""CREATE TABLE {notexists} {schema}.mdstatrshipdet (
    ltabphyname {limit_text} (30) NOT NULL,
    rtabphyname {limit_text} (30) NOT NULL,
    relationshipname {limit_text} (30) NOT NULL,
    ltabcolphyname {limit_text} (30) NOT NULL,
    rtabcolphyname {limit_text} (30) NOT NULL,
    PRIMARY KEY (ltabphyname, rtabphyname, relationshipname, ltabcolphyname, rtabcolphyname));""",

"""CREATE TABLE {notexists} {schema}.mdstatrshipmas (
    ltabphyname {limit_text} (30) NOT NULL,
    rtabphyname {limit_text} (30) NOT NULL,
    relationshipname {limit_text} (30) NOT NULL,
    cardinality {limit_text} (254) NOT NULL,
    mandatory {limit_text} (3) NOT NULL,
    PRIMARY KEY (ltabphyname, rtabphyname, relationshipname));""",

"""CREATE TABLE {notexists} {schema}.mdstattabcols (
    tabphyname {limit_text} (30) NOT NULL,
    colsequence {short_int} NOT NULL,
    colphyname {limit_text} (30) NOT NULL,
    collogname {limit_text} (30) NOT NULL,
    collabel {limit_text} (80) NOT NULL,
    logicaldatatype {limit_text} (254) NOT NULL,
    not_null {limit_text} (3) NOT NULL,  --changed notnull -> not_null
    fieldsize {short_int},
    precision {short_int},
    minimum {double},
    maximum {double},
    uom {limit_text} (60),
    domainname {limit_text} (40),
    coldesc {text} NOT NULL,
    PRIMARY KEY (tabphyname, colsequence));""",

"""CREATE TABLE {notexists} {schema}.mdstattabs (
    tabphyname {limit_text} (30) PRIMARY KEY,
    tablogname {limit_text} (30) NOT NULL,
    tablabel {limit_text} (80) NOT NULL,
    tabdesc {text} NOT NULL,
    iefilename {limit_text} (30) NOT NULL);""",

"""CREATE TABLE {notexists} {schema}.month (
    monthseq {short_int} NOT NULL,
    monthname {limit_text} (9) PRIMARY KEY);""",

"""CREATE TABLE {notexists} {schema}.muaggatt (
    musym {limit_text} (6) NOT NULL,
    muname {limit_text} (175),
    mustatus {limit_text} (254),
    slopegraddcp {double},
    slopegradwta {double},
    brockdepmin {short_int},
    wtdepannmin {short_int},
    wtdepaprjunmin {short_int},
    flodfreqdcd {limit_text} (254),
    flodfreqmax {limit_text} (254),
    pondfreqprs {limit_text} (254),
    aws025wta {double},
    aws050wta {double},
    aws0100wta {double},
    aws0150wta {double},
    drclassdcd {limit_text} (254),
    drclasswettest {limit_text} (254),
    hydgrpdcd {limit_text} (254),
    iccdcd {limit_text} (254),
    iccdcdpct {short_int},
    niccdcd {limit_text} (254),
    niccdcdpct {short_int},
    engdwobdcd {limit_text} (254),
    engdwbdcd {limit_text} (254),
    engdwbll {limit_text} (254),
    engdwbml {limit_text} (254),
    engstafdcd {limit_text} (254),
    engstafll {limit_text} (254),
    engstafml {limit_text} (254),
    engsldcd {limit_text} (254),
    engsldcp {limit_text} (254),
    englrsdcd {limit_text} (254),
    engcmssdcd {limit_text} (254),
    engcmssmp {limit_text} (254),
    urbrecptdcd {limit_text} (254),
    urbrecptwta {double},
    forpehrtdcp {limit_text} (254),
    hydclprs {limit_text} (254),
    awmmfpwwta {double},
    mukey {limit_text} (30) PRIMARY KEY);""",

"""CREATE TABLE {notexists} {schema}.muline (
    OBJECTID {oid},
    areasymbol {limit_text} (20),
    spatialver {double},
    musym {limit_text} (6),
    mukey {limit_text} (30),
    length_m {double});""",


"""CREATE TABLE {notexists} {schema}.mupoint (
    OBJECTID {oid},
    areasymbol {limit_text} (20),
    spatialver {double},
    musym {limit_text} (6),
    mukey {limit_text} (30),
    x {double},
    y {double});""",


"""CREATE TABLE {notexists} {schema}.mupolygon (
    OBJECTID {oid},
    areasymbol {limit_text} (20),
    spatialver {double},
    musym {limit_text} (6),
    mukey {limit_text} (30),
    area_ha {double});""",

"""CREATE TABLE {notexists} {schema}.sacatalog (
    areasymbol {limit_text} (20) NOT NULL,
    areaname {limit_text} (135) NOT NULL,
    saversion {int} NOT NULL,
    saverest {date} NOT NULL,
    tabularversion {int} NOT NULL,
    tabularverest {date} NOT NULL,
    tabnasisexportdate {date} NOT NULL,
    tabcertstatus {limit_text} (254),
    tabcertstatusdesc {text},
    fgdcmetadata {text} NOT NULL,
    sacatalogkey {limit_text} (30) PRIMARY KEY);""",

"""CREATE TABLE {notexists} {schema}.sapolygon (
    OBJECTID {oid},
    areasymbol {limit_text} (20),
    spatialver {double},
    lkey {limit_text} (30),
    area_ha {double});""",

"""CREATE TABLE {notexists} {schema}.sdvalgorithm (
    algorithmsequence {short_int} NOT NULL,
    algorithmname {limit_text} (50) PRIMARY KEY,
    algorithminitials {limit_text} (3) NOT NULL,
    algorithmdescription {text} NOT NULL);""",

"""CREATE TABLE {notexists} {schema}.sdvattribute (
    attributekey {int} PRIMARY KEY,
    attributename {limit_text} (60) NOT NULL,
    attributetablename {limit_text} (30) NOT NULL,
    attributecolumnname {limit_text} (30) NOT NULL,
    attributelogicaldatatype {limit_text} (20) NOT NULL,
    attributefieldsize {short_int},
    attributeprecision {short_int},
    attributedescription {text} NOT NULL,
    attributeuom {limit_text} (60),
    attributeuomabbrev {limit_text} (30),
    attributetype {limit_text} (20) NOT NULL,
    nasisrulename {limit_text} (60),
    ruledesign {short_int},
    notratedphrase {limit_text} (254),
    mapunitlevelattribflag {short_int} NOT NULL,
    complevelattribflag {short_int} NOT NULL,
    cmonthlevelattribflag {short_int} NOT NULL,
    horzlevelattribflag {short_int} NOT NULL,
    tiebreakdomainname {limit_text} (40),
    tiebreakruleoptionflag {short_int} NOT NULL,
    tiebreaklowlabel {limit_text} (20),
    tiebreakhighlabel {limit_text} (20),
    tiebreakrule {short_int} NOT NULL,
    resultcolumnname {limit_text} (10) NOT NULL,
    sqlwhereclause {limit_text} (255),
    primaryconcolname {limit_text} (30),
    pcclogicaldatatype {limit_text} (20),
    primaryconstraintlabel {limit_text} (30),
    secondaryconcolname {limit_text} (30),
    scclogicaldatatype {limit_text} (20),
    secondaryconstraintlabel {limit_text} (30),
    dqmodeoptionflag {short_int} NOT NULL,
    depthqualifiermode {limit_text} (20),
    layerdepthtotop {double},
    layerdepthtobottom {double},
    layerdepthuom {limit_text} (20),
    monthrangeoptionflag {short_int} NOT NULL,
    beginningmonth {limit_text} (9),
    endingmonth {limit_text} (9),
    horzaggmeth {limit_text} (30),
    interpnullsaszerooptionflag {short_int} NOT NULL,
    interpnullsaszeroflag {short_int} NOT NULL,
    nullratingreplacementvalue {limit_text} (254),
    basicmodeflag {short_int} NOT NULL,
    maplegendkey {int} NOT NULL,
    maplegendclasses {short_int},
    maplegendxml {text} NOT NULL,
    nasissiteid {int} NOT NULL,
    wlupdated {date} NOT NULL,
    algorithmname {limit_text} (50) NOT NULL,
    componentpercentcutoff {short_int},
    readytodistribute {short_int} NOT NULL,
    effectivelogicaldatatype {limit_text} (20) NOT NULL);""",

"""CREATE TABLE {notexists} {schema}.sdvfolder (
    foldersequence {short_int} NOT NULL,
    foldername {limit_text} (80) NOT NULL,
    folderdescription {text} NOT NULL,
    folderkey {int} PRIMARY KEY,
    parentfolderkey {int},
    wlupdated {date} NOT NULL);""",

"""CREATE TABLE {notexists} {schema}.sdvfolderattribute (
    folderkey {int} NOT NULL,
    attributekey {int} NOT NULL,
    PRIMARY KEY (folderkey, attributekey));""",

"""CREATE TABLE {notexists} {schema}.version (
    areasymbol {limit_text} (20),
    datatype {limit_text} (20),
    version {limit_text} (20),
    PRIMARY KEY (areasymbol, datatype));""",


####### LEVEL 2 #######

"""CREATE TABLE {notexists} {schema}.distinterpmd (
    rulename {limit_text} (60),
    ruledesign {limit_text} (254) NOT NULL,
    ruledesc {text},
    dataafuse {limit_text} (3),
    mrecentrulecwlu {date},
    rulekey {limit_text} (30) NOT NULL,
    distmdkey {limit_text} (30) NOT NULL,
    distinterpmdkey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(distmdkey) REFERENCES {schema}.distmd(distmdkey));""",

"""CREATE TABLE {notexists} {schema}.distlegendmd (
    areatypename {limit_text} (45),
    areasymbol {limit_text} (20),
    areaname {limit_text} (135),
    ssastatus {limit_text} (254),
    cordate {date},
    exportcertstatus {limit_text} (254),
    exportcertdate {date},
    exportmetadata {text},
    lkey {limit_text} (30) NOT NULL,
    distmdkey {limit_text} (30) NOT NULL,
    distlegendmdkey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(distmdkey) REFERENCES {schema}.distmd(distmdkey));""",

"""CREATE TABLE {notexists} {schema}.laoverlap (
    areatypename {limit_text} (45) NOT NULL,
    areasymbol {limit_text} (20) NOT NULL,
    areaname {limit_text} (135),
    areaovacres {int},
    lkey {limit_text} (30) NOT NULL,
    lareaovkey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(lkey) REFERENCES {schema}.legend(lkey));""",

"""CREATE TABLE {notexists} {schema}.legendtext (
    recdate {date},
    legendtextkind {limit_text} (254),
    textcat {limit_text} (20),
    textsubcat {limit_text} (20),
    text {text},
    lkey {limit_text} (30) NOT NULL,
    legtextkey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(lkey) REFERENCES {schema}.legend(lkey));""",

"""CREATE TABLE {notexists} {schema}.mapunit (
    musym {limit_text} (6) NOT NULL,
    muname {limit_text} (175),
    mukind {limit_text} (254),
    mustatus {limit_text} (254),
    muacres {int},
    mapunitlfw_l {short_int},
    mapunitlfw_r {short_int},
    mapunitlfw_h {short_int},
    mapunitpfa_l {double},
    mapunitpfa_r {double},
    mapunitpfa_h {double},
    farmlndcl {limit_text} (254),
    muhelcl {limit_text} (254),
    muwathelcl {limit_text} (254),
    muwndhelcl {limit_text} (254),
    interpfocus {limit_text} (30),
    invesintens {limit_text} (254),
    iacornsr {short_int},
    nhiforsoigrp {limit_text} (254),
    nhspiagr {double},
    vtsepticsyscl {limit_text} (254),
    mucertstat {limit_text} (254),
    lkey {limit_text} (30) NOT NULL,
    mukey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(lkey) REFERENCES {schema}.legend(lkey));""",

"""CREATE TABLE {notexists} {schema}.sainterp (
    areasymbol {limit_text} (20) NOT NULL,
    interpname {limit_text} (60) NOT NULL,
    interptype {limit_text} (254) NOT NULL,
    interpdesc {text},
    interpdesigndate {date} NOT NULL,
    interpgendate {date} NOT NULL,
    interpmaxreasons {short_int},
    sacatalogkey {limit_text} (30) NOT NULL,
    sainterpkey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(sacatalogkey) REFERENCES {schema}.sacatalog(sacatalogkey));""",

####### LEVEL 3 #######

"""CREATE TABLE {notexists} {schema}.component (
    comppct_l {short_int},
    comppct_r {short_int},
    comppct_h {short_int},
    compname {limit_text} (60),
    compkind {limit_text} (254),
    majcompflag {limit_text} (3),
    otherph {limit_text} (40),
    localphase {limit_text} (40),
    slope_l {double},
    slope_r {double},
    slope_h {double},
    slopelenusle_l {short_int},
    slopelenusle_r {short_int},
    slopelenusle_h {short_int},
    runoff {limit_text} (254),
    tfact {short_int},
    wei {limit_text} (254),
    weg {limit_text} (254),
    erocl {limit_text} (254),
    earthcovkind1 {limit_text} (254),
    earthcovkind2 {limit_text} (254),
    hydricon {limit_text} (254),
    hydricrating {limit_text} (254),
    drainagecl {limit_text} (254),
    elev_l {double},
    elev_r {double},
    elev_h {double},
    aspectccwise {short_int},
    aspectrep {short_int},
    aspectcwise {short_int},
    geomdesc {text},
    albedodry_l {double},
    albedodry_r {double},
    albedodry_h {double},
    airtempa_l {double},
    airtempa_r {double},
    airtempa_h {double},
    map_l {short_int},
    map_r {short_int},
    map_h {short_int},
    reannualprecip_l {short_int},
    reannualprecip_r {short_int},
    reannualprecip_h {short_int},
    ffd_l {short_int},
    ffd_r {short_int},
    ffd_h {short_int},
    nirrcapcl {limit_text} (254),
    nirrcapscl {limit_text} (254),
    nirrcapunit {short_int},
    irrcapcl {limit_text} (254),
    irrcapscl {limit_text} (254),
    irrcapunit {short_int},
    cropprodindex {short_int},
    constreeshrubgrp {limit_text} (254),
    wndbrksuitgrp {limit_text} (254),
    rsprod_l {int},
    rsprod_r {int},
    rsprod_h {int},
    foragesuitgrpid {limit_text} (11),
    wlgrain {limit_text} (254),
    wlgrass {limit_text} (254),
    wlherbaceous {limit_text} (254),
    wlshrub {limit_text} (254),
    wlconiferous {limit_text} (254),
    wlhardwood {limit_text} (254),
    wlwetplant {limit_text} (254),
    wlshallowwat {limit_text} (254),
    wlrangeland {limit_text} (254),
    wlopenland {limit_text} (254),
    wlwoodland {limit_text} (254),
    wlwetland {limit_text} (254),
    soilslippot {limit_text} (254),
    frostact {limit_text} (254),
    initsub_l {short_int},
    initsub_r {short_int},
    initsub_h {short_int},
    totalsub_l {short_int},
    totalsub_r {short_int},
    totalsub_h {short_int},
    hydgrp {limit_text} (254),
    corcon {limit_text} (254),
    corsteel {limit_text} (254),
    taxclname {limit_text} (120),
    taxorder {limit_text} (254),
    taxsuborder {limit_text} (254),
    taxgrtgroup {limit_text} (254),
    taxsubgrp {limit_text} (254),
    taxpartsize {limit_text} (254),
    taxpartsizemod {limit_text} (254),
    taxceactcl {limit_text} (254),
    taxreaction {limit_text} (254),
    taxtempcl {limit_text} (254),
    taxmoistscl {limit_text} (254),
    taxtempregime {limit_text} (254),
    soiltaxedition {limit_text} (254),
    castorieindex {short_int},
    flecolcomnum {limit_text} (5),
    flhe {limit_text} (3),
    flphe {limit_text} (3),
    flsoilleachpot {limit_text} (254),
    flsoirunoffpot {limit_text} (254),
    fltemik2use {limit_text} (3),
    fltriumph2use {limit_text} (3),
    indraingrp {limit_text} (3),
    innitrateleachi {short_int},
    misoimgmtgrp {limit_text} (254),
    vasoimgtgrp {limit_text} (254),
    mukey {limit_text} (30) NOT NULL,
    cokey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(mukey) REFERENCES {schema}.mapunit(mukey));""",

"""CREATE TABLE {notexists} {schema}.muaoverlap (
    areaovacres {int},
    lareaovkey {limit_text} (30) NOT NULL,
    mukey {limit_text} (30) NOT NULL,
    muareaovkey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(mukey) REFERENCES {schema}.mapunit(mukey));""",

"""CREATE TABLE {notexists} {schema}.mucropyld (
    cropname {limit_text} (254),
    yldunits {limit_text} (254),
    nonirryield_l {double},
    nonirryield_r {double},
    nonirryield_h {double},
    irryield_l {double},
    irryield_r {double},
    irryield_h {double},
    mukey {limit_text} (30) NOT NULL,
    mucrpyldkey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(mukey) REFERENCES {schema}.mapunit(mukey));""",

"""CREATE TABLE {notexists} {schema}.mutext (
    recdate {date},
    mapunittextkind {limit_text} (254),
    textcat {limit_text} (20),
    textsubcat {limit_text} (20),
    text {text},
    mukey {limit_text} (30) NOT NULL,
    mutextkey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(mukey) REFERENCES {schema}.mapunit(mukey));""",

####### LEVEL 4 #######

"""CREATE TABLE {notexists} {schema}.chorizon (
    hzname {limit_text} (12),
    desgndisc {short_int},
    desgnmaster {limit_text} (254),
    desgnmasterprime {limit_text} (254),
    desgnvert {short_int},
    hzdept_l {short_int},
    hzdept_r {short_int},
    hzdept_h {short_int},
    hzdepb_l {short_int},
    hzdepb_r {short_int},
    hzdepb_h {short_int},
    hzthk_l {short_int},
    hzthk_r {short_int},
    hzthk_h {short_int},
    fraggt10_l {short_int},
    fraggt10_r {short_int},
    fraggt10_h {short_int},
    frag3to10_l {short_int},
    frag3to10_r {short_int},
    frag3to10_h {short_int},
    sieveno4_l {double},
    sieveno4_r {double},
    sieveno4_h {double},
    sieveno10_l {double},
    sieveno10_r {double},
    sieveno10_h {double},
    sieveno40_l {double},
    sieveno40_r {double},
    sieveno40_h {double},
    sieveno200_l {double},
    sieveno200_r {double},
    sieveno200_h {double},
    sandtotal_l {double},
    sandtotal_r {double},
    sandtotal_h {double},
    sandvc_l {double},
    sandvc_r {double},
    sandvc_h {double},
    sandco_l {double},
    sandco_r {double},
    sandco_h {double},
    sandmed_l {double},
    sandmed_r {double},
    sandmed_h {double},
    sandfine_l {double},
    sandfine_r {double},
    sandfine_h {double},
    sandvf_l {double},
    sandvf_r {double},
    sandvf_h {double},
    silttotal_l {double},
    silttotal_r {double},
    silttotal_h {double},
    siltco_l {double},
    siltco_r {double},
    siltco_h {double},
    siltfine_l {double},
    siltfine_r {double},
    siltfine_h {double},
    claytotal_l {double},
    claytotal_r {double},
    claytotal_h {double},
    claysizedcarb_l {double},
    claysizedcarb_r {double},
    claysizedcarb_h {double},
    om_l {double},
    om_r {double},
    om_h {double},
    dbtenthbar_l {double},
    dbtenthbar_r {double},
    dbtenthbar_h {double},
    dbthirdbar_l {double},
    dbthirdbar_r {double},
    dbthirdbar_h {double},
    dbfifteenbar_l {double},
    dbfifteenbar_r {double},
    dbfifteenbar_h {double},
    dbovendry_l {double},
    dbovendry_r {double},
    dbovendry_h {double},
    partdensity {double},
    ksat_l {double},
    ksat_r {double},
    ksat_h {double},
    awc_l {double},
    awc_r {double},
    awc_h {double},
    wtenthbar_l {double},
    wtenthbar_r {double},
    wtenthbar_h {double},
    wthirdbar_l {double},
    wthirdbar_r {double},
    wthirdbar_h {double},
    wfifteenbar_l {double},
    wfifteenbar_r {double},
    wfifteenbar_h {double},
    wsatiated_l {short_int},
    wsatiated_r {short_int},
    wsatiated_h {short_int},
    lep_l {double},
    lep_r {double},
    lep_h {double},
    ll_l {double},
    ll_r {double},
    ll_h {double},
    pi_l {double},
    pi_r {double},
    pi_h {double},
    aashind_l {short_int},
    aashind_r {short_int},
    aashind_h {short_int},
    kwfact {limit_text} (254),
    kffact {limit_text} (254),
    caco3_l {short_int},
    caco3_r {short_int},
    caco3_h {short_int},
    gypsum_l {short_int},
    gypsum_r {short_int},
    gypsum_h {short_int},
    sar_l {double},
    sar_r {double},
    sar_h {double},
    ec_l {double},
    ec_r {double},
    ec_h {double},
    cec7_l {double},
    cec7_r {double},
    cec7_h {double},
    ecec_l {double},
    ecec_r {double},
    ecec_h {double},
    sumbases_l {double},
    sumbases_r {double},
    sumbases_h {double},
    ph1to1h2o_l {double},
    ph1to1h2o_r {double},
    ph1to1h2o_h {double},
    ph01mcacl2_l {double},
    ph01mcacl2_r {double},
    ph01mcacl2_h {double},
    freeiron_l {double},
    freeiron_r {double},
    freeiron_h {double},
    feoxalate_l {double},
    feoxalate_r {double},
    feoxalate_h {double},
    extracid_l {double},
    extracid_r {double},
    extracid_h {double},
    extral_l {double},
    extral_r {double},
    extral_h {double},
    aloxalate_l {double},
    aloxalate_r {double},
    aloxalate_h {double},
    pbray1_l {double},
    pbray1_r {double},
    pbray1_h {double},
    poxalate_l {double},
    poxalate_r {double},
    poxalate_h {double},
    ph2osoluble_l {double},
    ph2osoluble_r {double},
    ph2osoluble_h {double},
    ptotal_l {double},
    ptotal_r {double},
    ptotal_h {double},
    excavdifcl {limit_text} (254),
    excavdifms {limit_text} (254),
    cokey {limit_text} (30) NOT NULL,
    chkey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(cokey) REFERENCES {schema}.component(cokey));""",

"""CREATE TABLE {notexists} {schema}.cocanopycover (
    plantcov {short_int},
    plantsym {limit_text} (8) NOT NULL,
    plantsciname {limit_text} (127),
    plantcomname {limit_text} (60),
    cokey {limit_text} (30) NOT NULL,
    cocanopycovkey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(cokey) REFERENCES {schema}.component(cokey));""",

"""CREATE TABLE {notexists} {schema}.cocropyld (
    cropname {limit_text} (254),
    yldunits {limit_text} (254),
    nonirryield_l {double},
    nonirryield_r {double},
    nonirryield_h {double},
    irryield_l {double},
    irryield_r {double},
    irryield_h {double},
    cropprodindex {short_int},
    vasoiprdgrp {limit_text} (254),
    cokey {limit_text} (30) NOT NULL,
    cocropyldkey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(cokey) REFERENCES {schema}.component(cokey));""",

"""CREATE TABLE {notexists} {schema}.codiagfeatures (
    featkind {limit_text} (254),
    featdept_l {short_int},
    featdept_r {short_int},
    featdept_h {short_int},
    featdepb_l {short_int},
    featdepb_r {short_int},
    featdepb_h {short_int},
    featthick_l {short_int},
    featthick_r {short_int},
    featthick_h {short_int},
    cokey {limit_text} (30) NOT NULL,
    codiagfeatkey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(cokey) REFERENCES {schema}.component(cokey));""",

"""CREATE TABLE {notexists} {schema}.coecoclass (
    ecoclasstypename {limit_text} (60) NOT NULL,
    ecoclassref {limit_text} (254),
    ecoclassid {limit_text} (30) NOT NULL,
    ecoclassname {text},
    cokey {limit_text} (30) NOT NULL,
    coecoclasskey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(cokey) REFERENCES {schema}.component(cokey));""",

"""CREATE TABLE {notexists} {schema}.coeplants (
    plantsym {limit_text} (8) NOT NULL,
    plantsciname {limit_text} (127),
    plantcomname {limit_text} (60),
    forestunprod {short_int},
    rangeprod {short_int},
    cokey {limit_text} (30) NOT NULL,
    coeplantskey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(cokey) REFERENCES {schema}.component(cokey));""",

"""CREATE TABLE {notexists} {schema}.coerosionacc (
    erokind {limit_text} (254),
    rvindicator {limit_text} (3) NOT NULL,
    cokey {limit_text} (30) NOT NULL,
    coeroacckey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(cokey) REFERENCES {schema}.component(cokey));""",

"""CREATE TABLE {notexists} {schema}.coforprod (
    plantsym {limit_text} (8) NOT NULL,
    plantsciname {limit_text} (127),
    plantcomname {limit_text} (60),
    siteindexbase {limit_text} (254),
    siteindex_l {short_int},
    siteindex_r {short_int},
    siteindex_h {short_int},
    fprod_l {double},
    fprod_r {double},
    fprod_h {double},
    cokey {limit_text} (30) NOT NULL,
    cofprodkey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(cokey) REFERENCES {schema}.component(cokey));""",

"""CREATE TABLE {notexists} {schema}.cogeomordesc (
    geomftname {limit_text} (30) NOT NULL,
    geomfname {limit_text} (50) NOT NULL,
    geomfmod {limit_text} (60),
    geomfeatid {short_int},
    existsonfeat {short_int},
    rvindicator {limit_text} (3) NOT NULL,
    cokey {limit_text} (30) NOT NULL,
    cogeomdkey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(cokey) REFERENCES {schema}.component(cokey));""",

"""CREATE TABLE {notexists} {schema}.cohydriccriteria (
    hydriccriterion {limit_text} (254),
    cokey {limit_text} (30) NOT NULL,
    cohydcritkey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(cokey) REFERENCES {schema}.component(cokey));""",

"""CREATE TABLE {notexists} {schema}.cointerp (
    cokey {limit_text} (30) NOT NULL,
    mrulekey {limit_text} (30) NOT NULL,
    mrulename {limit_text} (60) NOT NULL,
    seqnum {short_int} NOT NULL,
    rulekey {limit_text} (30) NOT NULL,
    rulename {limit_text} (60) NOT NULL,
    ruledepth {short_int} NOT NULL,
    interpll {double},
    interpllc {limit_text} (254),
    interplr {double},
    interplrc {limit_text} (254),
    interphr {double},
    interphrc {limit_text} (254),
    interphh {double},
    interphhc {limit_text} (254),
    nullpropdatabool {limit_text} (3),
    defpropdatabool {limit_text} (3),
    incpropdatabool {limit_text} (3),
    cointerpkey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(cokey) REFERENCES {schema}.component(cokey));""",

"""CREATE TABLE {notexists} {schema}.comonth (
    monthseq {short_int},
    month {limit_text} (254),
    flodfreqcl {limit_text} (254),
    floddurcl {limit_text} (254),
    pondfreqcl {limit_text} (254),
    ponddurcl {limit_text} (254),
    ponddep_l {short_int},
    ponddep_r {short_int},
    ponddep_h {short_int},
    dlyavgprecip_l {short_int},
    dlyavgprecip_r {short_int},
    dlyavgprecip_h {short_int},
    dlyavgpotet_l {short_int},
    dlyavgpotet_r {short_int},
    dlyavgpotet_h {short_int},
    cokey {limit_text} (30) NOT NULL,
    comonthkey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(cokey) REFERENCES {schema}.component(cokey));""",

"""CREATE TABLE {notexists} {schema}.copmgrp (
    pmgroupname {limit_text} (252),
    rvindicator {limit_text} (3) NOT NULL,
    cokey {limit_text} (30) NOT NULL,
    copmgrpkey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(cokey) REFERENCES {schema}.component(cokey));""",

"""CREATE TABLE {notexists} {schema}.copwindbreak (
    wndbrkht_l {double},
    wndbrkht_r {double},
    wndbrkht_h {double},
    plantsym {limit_text} (8) NOT NULL,
    plantsciname {limit_text} (127),
    plantcomname {limit_text} (60),
    cokey {limit_text} (30) NOT NULL,
    copwindbreakkey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(cokey) REFERENCES {schema}.component(cokey));""",

"""CREATE TABLE {notexists} {schema}.corestrictions (
    reskind {limit_text} (254),
    reshard {limit_text} (254),
    resdept_l {short_int},
    resdept_r {short_int},
    resdept_h {short_int},
    resdepb_l {short_int},
    resdepb_r {short_int},
    resdepb_h {short_int},
    resthk_l {short_int},
    resthk_r {short_int},
    resthk_h {short_int},
    cokey {limit_text} (30) NOT NULL,
    corestrictkey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(cokey) REFERENCES {schema}.component(cokey));""",

"""CREATE TABLE {notexists} {schema}.cosurffrags (
    sfragcov_l {double},
    sfragcov_r {double},
    sfragcov_h {double},
    distrocks_l {double},
    distrocks_r {double},
    distrocks_h {double},
    sfragkind {limit_text} (254),
    sfragsize_l {short_int},
    sfragsize_r {short_int},
    sfragsize_h {short_int},
    sfragshp {limit_text} (254),
    sfraground {limit_text} (254),
    sfraghard {limit_text} (254),
    cokey {limit_text} (30) NOT NULL,
    cosurffragskey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(cokey) REFERENCES {schema}.component(cokey));""",

"""CREATE TABLE {notexists} {schema}.cotaxfmmin (
    taxminalogy {limit_text} (254),
    cokey {limit_text} (30) NOT NULL,
    cotaxfmminkey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(cokey) REFERENCES {schema}.component(cokey));""",

"""CREATE TABLE {notexists} {schema}.cotaxmoistcl (
    taxmoistcl {limit_text} (254),
    cokey {limit_text} (30) NOT NULL,
    cotaxmckey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(cokey) REFERENCES {schema}.component(cokey));""",

"""CREATE TABLE {notexists} {schema}.cotext (
    recdate {date},
    comptextkind {limit_text} (254),
    textcat {limit_text} (20),
    textsubcat {limit_text} (20),
    text {text},
    cokey {limit_text} (30) NOT NULL,
    cotextkey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(cokey) REFERENCES {schema}.component(cokey));""",

"""CREATE TABLE {notexists} {schema}.cotreestomng (
    plantsym {limit_text} (8) NOT NULL,
    plantsciname {limit_text} (127),
    plantcomname {limit_text} (60),
    cokey {limit_text} (30) NOT NULL,
    cotreestomngkey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(cokey) REFERENCES {schema}.component(cokey));""",

"""CREATE TABLE {notexists} {schema}.cotxfmother (
    taxfamother {limit_text} (254),
    cokey {limit_text} (30) NOT NULL,
    cotaxfokey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(cokey) REFERENCES {schema}.component(cokey));""",

####### LEVEL 5 #######

"""CREATE TABLE {notexists} {schema}.chaashto (
    aashtocl {limit_text} (254),
    rvindicator {limit_text} (3) NOT NULL,
    chkey {limit_text} (30) NOT NULL,
    chaashtokey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(chkey) REFERENCES {schema}.chorizon(chkey));""",

"""CREATE TABLE {notexists} {schema}.chconsistence (
    rupresblkmst {limit_text} (254),
    rupresblkdry {limit_text} (254),
    rupresblkcem {limit_text} (254),
    rupresplate {limit_text} (254),
    mannerfailure {limit_text} (254),
    stickiness {limit_text} (254),
    plasticity {limit_text} (254),
    rvindicator {limit_text} (3) NOT NULL,
    chkey {limit_text} (30) NOT NULL,
    chconsistkey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(chkey) REFERENCES {schema}.chorizon(chkey));""",

"""CREATE TABLE {notexists} {schema}.chdesgnsuffix (
    desgnsuffix {limit_text} (254),
    chkey {limit_text} (30) NOT NULL,
    chdesgnsfxkey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(chkey) REFERENCES {schema}.chorizon(chkey));""",

"""CREATE TABLE {notexists} {schema}.chfrags (
    fragvol_l {short_int},
    fragvol_r {short_int},
    fragvol_h {short_int},
    fragkind {limit_text} (254),
    fragsize_l {short_int},
    fragsize_r {short_int},
    fragsize_h {short_int},
    fragshp {limit_text} (254),
    fraground {limit_text} (254),
    fraghard {limit_text} (254),
    chkey {limit_text} (30) NOT NULL,
    chfragskey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(chkey) REFERENCES {schema}.chorizon(chkey));""",

"""CREATE TABLE {notexists} {schema}.chpores (
    poreqty_l {double},
    poreqty_r {double},
    poreqty_h {double},
    poresize {limit_text} (254),
    porecont {limit_text} (254),
    poreshp {limit_text} (254),
    rvindicator {limit_text} (3) NOT NULL,
    chkey {limit_text} (30) NOT NULL,
    chporeskey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(chkey) REFERENCES {schema}.chorizon(chkey));""",

"""CREATE TABLE {notexists} {schema}.chstructgrp (
    structgrpname {limit_text} (254),
    rvindicator {limit_text} (3) NOT NULL,
    chkey {limit_text} (30) NOT NULL,
    chstructgrpkey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(chkey) REFERENCES {schema}.chorizon(chkey));""",

"""CREATE TABLE {notexists} {schema}.chtext (
    recdate {date},
    chorizontextkind {limit_text} (254),
    textcat {limit_text} (20),
    textsubcat {limit_text} (20),
    text {text},
    chkey {limit_text} (30) NOT NULL,
    chtextkey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(chkey) REFERENCES {schema}.chorizon(chkey));""",

"""CREATE TABLE {notexists} {schema}.chtexturegrp (
    texture {limit_text} (30),
    stratextsflag {limit_text} (3) NOT NULL,
    rvindicator {limit_text} (3) NOT NULL,
    texdesc {text},
    chkey {limit_text} (30) NOT NULL,
    chtgkey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(chkey) REFERENCES {schema}.chorizon(chkey));""",

"""CREATE TABLE {notexists} {schema}.chunified (
    unifiedcl {limit_text} (254),
    rvindicator {limit_text} (3) NOT NULL,
    chkey {limit_text} (30) NOT NULL,
    chunifiedkey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(chkey) REFERENCES {schema}.chorizon(chkey));""",

"""CREATE TABLE {notexists} {schema}.coforprodo (
    siteindexbase {limit_text} (254),
    siteindex_l {short_int},
    siteindex_r {short_int},
    siteindex_h {short_int},
    fprod_l {double},
    fprod_r {double},
    fprod_h {double},
    fprodunits {limit_text} (254),
    cofprodkey {limit_text} (30) NOT NULL,
    cofprodokey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(cofprodkey) REFERENCES {schema}.coforprod(cofprodkey));""",

"""CREATE TABLE {notexists} {schema}.copm (
    pmorder {short_int},
    pmmodifier {limit_text} (254),
    pmgenmod {limit_text} (60),
    pmkind {limit_text} (254),
    pmorigin {limit_text} (254),
    copmgrpkey {limit_text} (30) NOT NULL,
    copmkey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(copmgrpkey) REFERENCES {schema}.copmgrp(copmgrpkey));""",

"""CREATE TABLE {notexists} {schema}.cosoilmoist (
    soimoistdept_l {short_int},
    soimoistdept_r {short_int},
    soimoistdept_h {short_int},
    soimoistdepb_l {short_int},
    soimoistdepb_r {short_int},
    soimoistdepb_h {short_int},
    soimoiststat {limit_text} (254),
    comonthkey {limit_text} (30) NOT NULL,
    cosoilmoistkey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(comonthkey) REFERENCES {schema}.comonth(comonthkey));""",

"""CREATE TABLE {notexists} {schema}.cosoiltemp (
    soitempmm {short_int},
    soitempdept_l {short_int},
    soitempdept_r {short_int},
    soitempdept_h {short_int},
    soitempdepb_l {short_int},
    soitempdepb_r {short_int},
    soitempdepb_h {short_int},
    comonthkey {limit_text} (30) NOT NULL,
    cosoiltempkey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(comonthkey) REFERENCES {schema}.comonth(comonthkey));""",

"""CREATE TABLE {notexists} {schema}.cosurfmorphgc (
    geomposmntn {limit_text} (254),
    geomposhill {limit_text} (254),
    geompostrce {limit_text} (254),
    geomposflats {limit_text} (254),
    cogeomdkey {limit_text} (30) NOT NULL,
    cosurfmorgckey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(cogeomdkey) REFERENCES {schema}.cogeomordesc(cogeomdkey));""",

"""CREATE TABLE {notexists} {schema}.cosurfmorphhpp (
    hillslopeprof {limit_text} (254),
    cogeomdkey {limit_text} (30) NOT NULL,
    cosurfmorhppkey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(cogeomdkey) REFERENCES {schema}.cogeomordesc(cogeomdkey));""",

"""CREATE TABLE {notexists} {schema}.cosurfmorphmr (
    geomicrorelief {limit_text} (254),
    cogeomdkey {limit_text} (30) NOT NULL,
    cosurfmormrkey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(cogeomdkey) REFERENCES {schema}.cogeomordesc(cogeomdkey));""",

"""CREATE TABLE {notexists} {schema}.cosurfmorphss (
    shapeacross {limit_text} (254),
    shapedown {limit_text} (254),
    cogeomdkey {limit_text} (30) NOT NULL,
    cosurfmorsskey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(cogeomdkey) REFERENCES {schema}.cogeomordesc(cogeomdkey));""",

####### LEVEL 6 #######

"""CREATE TABLE {notexists} {schema}.chstruct (
    structgrade {limit_text} (254),
    structsize {limit_text} (254),
    structtype {limit_text} (254),
    structid {short_int},
    structpartsto {short_int},
    chstructgrpkey {limit_text} (30) NOT NULL,
    chstructkey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(chstructgrpkey) REFERENCES {schema}.chstructgrp(chstructgrpkey));""",

"""CREATE TABLE {notexists} {schema}.chtexture (
    texcl {limit_text} (254),
    lieutex {limit_text} (254),
    chtgkey {limit_text} (30) NOT NULL,
    chtkey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(chtgkey) REFERENCES {schema}.chtexturegrp(chtgkey));""",

####### LEVEL 7 #######

"""CREATE TABLE {notexists} {schema}.chtexturemod (
    texmod {limit_text} (254),
    chtkey {limit_text} (30) NOT NULL,
    chtexmodkey {limit_text} (30) PRIMARY KEY,
    FOREIGN KEY(chtkey) REFERENCES {schema}.chtexture(chtkey));"""]
    
spatialite_addgeom = [
"""SELECT AddGeometryColumn('featline', 'shape', 4326, 'MULTILINESTRING', 2);""",
"""SELECT AddGeometryColumn('featpoint', 'shape', 4326, 'MULTIPOINT', 2);""",
"""SELECT AddGeometryColumn('muline', 'shape', 4326, 'MULTILINESTRING', 2);""",
"""SELECT AddGeometryColumn('mupoint', 'shape', 4326, 'MULTIPOINT', 2);""",
"""SELECT AddGeometryColumn('mupolygon', 'shape', 4326, 'MULTIPOLYGON', 2);""",
"""SELECT AddGeometryColumn('sapolygon', 'shape', 4326, 'MULTIPOLYGON', 2);"""]

postgis_addgeom = [
"""ALTER TABLE {schema}.featline ADD COLUMN IF NOT EXISTS shape geometry(MULTILINESTRING, 4326);""",
"""ALTER TABLE {schema}.featpoint ADD COLUMN IF NOT EXISTS shape geometry(MULTIPOINT, 4326);""",
"""ALTER TABLE {schema}.muline ADD COLUMN IF NOT EXISTS shape geometry(MULTILINESTRING, 4326);""",
"""ALTER TABLE {schema}.mupoint ADD COLUMN IF NOT EXISTS shape geometry(MULTIPOINT, 4326);""",
"""ALTER TABLE {schema}.mupolygon ADD COLUMN IF NOT EXISTS shape geometry(MULTIPOLYGON, 4326);""",
"""ALTER TABLE {schema}.sapolygon ADD COLUMN IF NOT EXISTS shape geometry(MULTIPOLYGON, 4326);"""]


temp_tables = [
###### Shapefile temp tables ######
"""DROP TABLE IF EXISTS {schema}.featline_shp;""",     
"""CREATE TABLE {schema}.featline_shp (
    OBJECTID {oid},
    areasymbol {limit_text} (20),
    spatialver {double},
    featsym {limit_text} (3),
    featkey {limit_text} (30));""",

"""DROP TABLE IF EXISTS {schema}.featpoint_shp;""",
"""CREATE TABLE {schema}.featpoint_shp (
    OBJECTID {oid},
    areasymbol {limit_text} (20),
    spatialver {double},
    featsym {limit_text} (3),
    featkey {limit_text} (30));""",

"""DROP TABLE IF EXISTS {schema}.muline_shp;""",
"""CREATE TABLE {schema}.muline_shp (
    OBJECTID {oid},
    areasymbol {limit_text} (20),
    spatialver {double},
    musym {limit_text} (6),
    mukey {limit_text} (30));""",

"""DROP TABLE IF EXISTS {schema}.mupoint_shp;""",
"""CREATE TABLE {schema}.mupoint_shp (
    OBJECTID {oid},
    areasymbol {limit_text} (20),
    spatialver {double},
    musym {limit_text} (6),
    mukey {limit_text} (30));""",

"""DROP TABLE IF EXISTS {schema}.mupolygon_shp;""",						  
"""CREATE TABLE {schema}.mupolygon_shp (
    OBJECTID {oid},
    areasymbol {limit_text} (20),
    spatialver {double},
    musym {limit_text} (6),
    mukey {limit_text} (30));""",

"""DROP TABLE IF EXISTS {schema}.sapolygon_shp;""",
"""CREATE TABLE {schema}.sapolygon_shp (
    OBJECTID {oid},
    areasymbol {limit_text} (20),
    spatialver {double},
    lkey {limit_text} (30));"""]
    
spatialite_temp_addgeom = [
"""SELECT AddGeometryColumn('featline_shp', 'shape', 4326, 'LINESTRING', 2);""",
"""SELECT AddGeometryColumn('featpoint_shp', 'shape', 4326, 'POINT', 2);""",
"""SELECT AddGeometryColumn('muline_shp', 'shape', 4326, 'LINESTRING', 2);""",
"""SELECT AddGeometryColumn('mupoint_shp', 'shape', 4326, 'POINT', 2);""",
"""SELECT AddGeometryColumn('mupolygon_shp', 'shape', 4326, 'POLYGON', 2);""",
"""SELECT AddGeometryColumn('sapolygon_shp', 'shape', 4326, 'POLYGON', 2);"""]

postgis_temp_addgeom = [
"""ALTER TABLE {schema}.featline_shp ADD COLUMN IF NOT EXISTS shape geometry(LINESTRING, 4326);""",
"""ALTER TABLE {schema}.featpoint_shp ADD COLUMN IF NOT EXISTS shape geometry(POINT, 4326);""",
"""ALTER TABLE {schema}.muline_shp ADD COLUMN IF NOT EXISTS shape geometry(LINESTRING, 4326);""",
"""ALTER TABLE {schema}.mupoint_shp ADD COLUMN IF NOT EXISTS shape geometry(POINT, 4326);""",
"""ALTER TABLE {schema}.mupolygon_shp ADD COLUMN IF NOT EXISTS shape geometry(POLYGON, 4326);""",
"""ALTER TABLE {schema}.sapolygon_shp ADD COLUMN IF NOT EXISTS shape geometry(POLYGON, 4326);"""]